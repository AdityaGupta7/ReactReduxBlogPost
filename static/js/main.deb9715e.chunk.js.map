{"version":3,"sources":["actions/types.js","components/PostForm.js","actions/postActions.js","components/Posts.js","components/Navbar.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","index.js"],"names":["FETCH_POSTS","NEW_POST","PostForm","props","onChange","e","setState","target","name","value","onSubmit","preventDefault","state","title","body","post","createPost","this","id","type","Component","connect","postData","dispatch","axios","then","payload","data","Posts","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","key","items","item","get","Navbar","className","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","ReactDOM","render","document","getElementById"],"mappings":"8UAAaA,EAAc,cACdC,EAAW,W,2BCKlBC,E,YAEF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,SAAW,SAACC,GACR,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAT3B,EAYnBC,SAAW,SAACL,GAER,GADAA,EAAEM,iBACsB,KAArB,EAAKC,MAAMC,OAAoC,KAApB,EAAKD,MAAME,KAAY,CACjD,IAAMC,EAAO,CACTF,MAAO,EAAKD,MAAMC,MAClBC,KAAM,EAAKF,MAAME,MAGrB,EAAKX,MAAMa,WAAWD,KAlB1B,EAAKH,MAAQ,CACTC,MAAO,GACPC,KAAM,IAJK,E,sEAyBf,OACI,6BACI,8CACA,kFACA,iIACA,0BAAMJ,SAAUO,KAAKP,UACjB,yBAAKQ,GAAG,SACJ,wCACA,6BACA,2BAAOC,KAAK,OAAOX,KAAK,QAAQJ,SAAUa,KAAKb,SAAUK,MAAOQ,KAAKL,MAAMC,SAE/E,6BACA,yBAAKK,GAAG,QACJ,4CACA,6BACA,8BAAUV,KAAK,OAAOJ,SAAUa,KAAKb,SAAUK,MAAOQ,KAAKL,MAAME,QAErE,6BACA,4BAAQK,KAAK,UAAb,kB,GA7CGC,aAwDRC,cAAQ,KAAM,CAAEL,WCrCxB,SAAqBM,GACxB,OAAO,SAAUC,GACbC,IAAMT,KAAK,6CAA8CO,GACxDG,MAAK,SAAAV,GAAI,OACNQ,EAAS,CACLJ,KAAMlB,EACNyB,QAASX,EAAKY,aD+BfN,CAA8BnB,GExDvC0B,G,kMAEEX,KAAKd,MAAM0B,e,gDAGWC,GAClBA,EAAUC,SACVd,KAAKd,MAAM6B,MAAMC,QAAQH,EAAUC,W,+BAKvC,IAAMG,EAAYjB,KAAKd,MAAM6B,MAAMG,KAAI,SAAApB,GAAI,OACvC,yBAAKG,GAAG,YAAYkB,IAAKrB,EAAKG,IAC1B,4BAAKH,EAAKF,OACV,2BAAIE,EAAKD,UAIjB,OACI,6BACI,qCACA,iFACA,yBAAKI,GAAG,gBACHgB,Q,GAxBDd,cA0CLC,eALS,SAAAT,GAAK,MAAK,CAC9BoB,MAAOpB,EAAMoB,MAAMK,MACnBN,QAASnB,EAAMoB,MAAMM,QAGe,CAAET,WD7CnC,WACH,OAAO,SAAUN,GACbC,IAAMe,IAAI,uDACLd,MAAK,SAAAO,GAAK,OACPT,EAAS,CACLJ,KAAMnB,EACN0B,QAASM,EAAML,aCuCpBN,CAAyCO,GCjCzCY,G,uLAVP,OACI,4BAAQtB,GAAG,eACP,yBAAKuB,UAAU,aACX,4BAAI,0BAAMvB,GAAG,gBAAT,wBAAJ,IAAwD,0BAAMA,GAAG,UAAT,0B,GALvDE,c,uBCDfsB,EAAe,CACjBL,MAAO,GACPC,KAAM,ICDKK,cAAgB,CAC3BX,MDGW,WAAuC,IAA9BpB,EAA6B,uDAArB8B,EAAcE,EAAO,uCACjD,OAAOA,EAAOzB,MACV,KAAKnB,EACD,OAAO,eACAY,EADP,CAEIyB,MAAOO,EAAOlB,UAEtB,KAAKzB,EACD,sBACOW,EADP,CAEI0B,KAAMM,EAAOlB,UAErB,QACI,OAAOd,MEdbiC,EAAa,CAACC,KAKLC,EAHDC,YAAYC,EAJL,GAIgCC,YAAQC,IAAe,WAAf,EAAmBN,GAChFO,OAAOC,8BAAgCD,OAAOC,iCCiB/BC,G,uLAhBX,OACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,MACA,yBAAKN,UAAU,OAAf,IACE,yBAAKvB,GAAG,SACN,kBAAC,EAAD,OAEF,yBAAKA,GAAG,SACN,kBAAC,EAAD,a,GAVME,cCJlBmC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.deb9715e.chunk.js","sourcesContent":["export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/postActions';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/postForm.css';\r\n\r\nclass PostForm extends Component {\r\n    //an example of both component-level state and application-level state co-existing (as is the need)\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.title !== '' && this.state.body !== ''){\r\n            const post = {\r\n                title: this.state.title,\r\n                body: this.state.body\r\n            }\r\n            //call action\r\n            this.props.createPost(post);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Add a new Post</h2>\r\n                <h5>POST request to jsonplaceholder.typicode.com/posts</h5>\r\n                <h5>Redux helps in making new post available to the Post component (on the right) from this component</h5>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div id=\"title\">\r\n                        <label>Title</label>\r\n                        <br />\r\n                        <input type=\"text\" name=\"title\" onChange={this.onChange} value={this.state.title} />\r\n                    </div>\r\n                    <br />\r\n                    <div id=\"body\">\r\n                        <label>Post Body</label>\r\n                        <br />\r\n                        <textarea name=\"body\" onChange={this.onChange} value={this.state.body} />\r\n                    </div>\r\n                    <br />\r\n                    <button type=\"submit\">Add Post</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    createPost: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, { createPost })(PostForm);\r\n","import { FETCH_POSTS, NEW_POST } from './types';\r\nimport axios from 'axios';\r\n\r\nexport function fetchPosts () {\r\n    return function (dispatch) {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts?_limit=6')\r\n            .then(posts =>\r\n                dispatch({\r\n                    type: FETCH_POSTS,\r\n                    payload: posts.data\r\n                    }\r\n                )\r\n            );\r\n        }\r\n        //fetch api alternative of the above\r\n        /*fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then(posts =>\r\n          dispatch({\r\n            type: FETCH_POSTS,\r\n            payload: posts\r\n          })\r\n        );*/\r\n}\r\n\r\nexport function createPost (postData) {\r\n    return function (dispatch) {\r\n        axios.post('https://jsonplaceholder.typicode.com/posts', postData)\r\n        .then(post => \r\n            dispatch({\r\n                type: NEW_POST,\r\n                payload: post.data\r\n                }\r\n            )\r\n        );\r\n    } \r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/postActions';\r\nimport '../styles/post.css';\r\n\r\nclass Posts extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.newPost) {\r\n            this.props.posts.unshift(nextProps.newPost);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const postItems = this.props.posts.map(post => (\r\n            <div id=\"post-card\" key={post.id}>\r\n                <h3>{post.title}</h3>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ));\r\n\r\n        return (\r\n            <div>\r\n                <h1>Posts</h1>\r\n                <h5>GET request to jsonplaceholder.typicode.com/posts</h5>\r\n                <div id=\"post-wrapper\">\r\n                    {postItems}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    newPost: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: state.posts.items, //state.posts because we have assigned postReducer to posts property in combinedReducer\r\n    newPost: state.posts.item //this is the reason we used redux; to pull the new posts from PostForm to Posts\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\r\n","import React, { Component } from 'react';\r\nimport '../styles/navbar.css';\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <header id=\"main-header\">\r\n                <div className=\"container\">\r\n                    <h2><span id=\"main-heading\">React-Redux BlogPost</span> <span id=\"author\">by Aditya Gupta</span></h2>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import { FETCH_POSTS, NEW_POST } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [], //all the posts coming from the action in which we have the fetch request\r\n    item: {} //the single new post-item we add\r\n}\r\n\r\nexport default function(state = initialState, action){//action is an object\r\n    switch(action.type){\r\n        case FETCH_POSTS:\r\n            return {\r\n                ...state,\r\n                items: action.payload //append the payload to the items (posts) array of the state object\r\n            };\r\n        case NEW_POST:\r\n            return{\r\n                ...state,\r\n                item: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware), \r\nwindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport PostForm from './components/PostForm';\nimport Posts from './components/Posts';\nimport Navbar from './components/Navbar';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Navbar />\n        <div className=\"App\"> {/* container */}\n          <div id=\"box-1\">\n            <PostForm />\n          </div>\n          <div id=\"box-2\">\n            <Posts />\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}